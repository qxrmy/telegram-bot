import sqlite3
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, BotCommand
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

TOKEN = '6795856308:AAHfeQj1vsUGO0AdfW-hRRzCKVAlIe5rN7A'

# Connect to SQLite database
conn = sqlite3.connect('telegram_bot.db')
cursor = conn.cursor()

# Create tables if not exists
cursor.execute('''CREATE TABLE IF NOT EXISTS links (
                    link_id TEXT PRIMARY KEY,
                    user_id INTEGER
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
                    message_id INTEGER PRIMARY KEY,
                    ref_user_id INTEGER,
                    message_text TEXT
                )''')

conn.commit()

ALLOWED_USERS = ['fuddnexst', 'keepohuy', 'levsha707']

def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    link_id = context.user_data.get('link_id')
    if not link_id:
        link_id = str(uuid.uuid4())
        cursor.execute("INSERT INTO links (link_id, user_id) VALUES (?, ?)", (link_id, user_id))
        context.user_data['link_id'] = link_id
        conn.commit()
    unique_link = f"<code>t.me/{context.bot.username}?start={link_id}</code>"
    update.message.reply_text(f"‚úâÔ∏è <i>–ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>\n\n<i>—Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n\nüëâ{unique_link}\n\n<i>–Ω–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode=ParseMode.HTML)

def handle_message(update: Update, context: CallbackContext):
    ref_user_id = context.user_data.get('ref_user_id')
    if ref_user_id:
        message = update.message.text
        ref_user_id = update.message.from_user.id
        cursor.execute("INSERT INTO messages (ref_user_id, message_text) VALUES (?, ?)", (ref_user_id, message))
        conn.commit()

        keyboard = [[InlineKeyboardButton("—É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è üîì", callback_data=str(cursor.lastrowid))]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        context.bot.send_message(chat_id=ref_user_id, text=f"<b><i>–ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i></b>\n\n<code>{message}</code>", reply_markup=reply_markup, parse_mode=ParseMode.HTML)

        keyboard_reply = [[InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", callback_data='send_another')]]
        reply_markup_reply = InlineKeyboardMarkup(keyboard_reply)
        update.message.reply_text("<i>–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</i>", reply_markup=reply_markup_reply, parse_mode=ParseMode.HTML)
    else:
        update.message.reply_text("‚úâÔ∏è <i>—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É!</i>")

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user

    if query.data == 'send_another':
        query.answer()
        query.edit_message_text(text="üöÄ <i>–æ—Ç–ø—Ä–∞–≤—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>", parse_mode=ParseMode.HTML)
        return

    if query.data == 'cancel':
        query.answer()
        user_id = query.from_user.id
        link_id = str(uuid.uuid4())
        cursor.execute("INSERT INTO links (link_id, user_id) VALUES (?, ?)", (link_id, user_id))
        context.user_data['link_id'] = link_id
        conn.commit()
        unique_link = f"<code>t.me/{context.bot.username}?start={link_id}</code>"
        query.edit_message_text(f"<i>—Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n\nüëâ {unique_link}\n\n<i>–Ω–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode=ParseMode.HTML)
        return

    if user.username in ALLOWED_USERS:
        message_id = int(query.data.split('_')[1]) if 'hide_' in query.data else int(query.data)
        ref_user_id = query.from_user.id

        if 'hide_' in query.data:
            query.answer()
            original_message = query.message.text_html.split('\n\n', 1)[1].split('\n\n')[0]
            query.edit_message_text(
                text=f"<b><i>–ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i></b>\n\n<code>{original_message}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("—É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è üîì", callback_data=str(message_id))]])
            )
        else:
            query.answer()
            original_message = query.message.text_html.split('\n\n', 1)[1]
            query.edit_message_text(
                text=f"<b><i>–ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i></b>\n\n<code>{original_message}</code>",
                parse_mode=ParseMode.HTML
            )
            cursor.execute("SELECT ref_user_id FROM messages WHERE message_id=?", (message_id,))
            ref_user_id = cursor.fetchone()[0]
            query.message.reply_text(f"<code>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {ref_user_id}</code>", parse_mode=ParseMode.HTML)

    else:
        query.answer(text="‚ùå —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ‚ùå", show_alert=True)

def get_unique_link(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    link_id = context.user_data.get('link_id')
    if not link_id:
        link_id = str(uuid.uuid4())
        cursor.execute("INSERT INTO links (link_id, user_id) VALUES (?, ?)", (link_id, user_id))
        context.user_data['link_id'] = link_id
        conn.commit()
    unique_link = f"<code>t.me/{context.bot.username}?start={link_id}</code>"
    update.message.reply_text(f"<i>—Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n\nüëâ{unique_link}\n\n<i>–Ω–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode=ParseMode.HTML)

def handle_start_link(update: Update, context: CallbackContext):
    args = context.args
    if args:
        link_id = args[0]
        cursor.execute("SELECT user_id FROM links WHERE link_id=?", (link_id,))
        ref_user_id = cursor.fetchone()
        if ref_user_id:
            context.user_data['ref_user_id'] = ref_user_id[0]
            keyboard = [[InlineKeyboardButton("–æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data='cancel')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text("‚úè <i>—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É</i>", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text("üôä —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ üôä")
    else:
        start(update, context)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    updater.bot.set_my_commands([
        BotCommand("start", "üîó get link"),
        BotCommand("changelink", "‚úè change link")
    ])

    dp.add_handler(CommandHandler("start", handle_start_link))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(CommandHandler("getlink", get_unique_link))
    dp.add_handler(CommandHandler("changelink", change_link))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()